{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/Header.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","this","props","title","calories","img","ingredients","className","src","alt","map","ingredient","i","key","text","React","Component","CardList","recipes","rcp","recipe","label","image","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","marginTop","children","Header","class","appID","appKey","App","performSearch","searchItem","fetch","then","response","json","data","setState","foodItems","hits","console","log","onSearchChange","event","target","value","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPA4BeA,E,iLAvBN,IAAD,EACqCC,KAAKC,MAA1CC,EADA,EACAA,MAAOC,EADP,EACOA,SAAUC,EADjB,EACiBA,IAAKC,EADtB,EACsBA,YAC7B,OAEC,yBAAKC,UAAU,sDAEd,wBAAIA,UAAU,gBAAgBJ,GAC9B,yBAAKK,IAAKH,EAAKI,IAAI,cAAcF,UAAU,4BAC3C,uBAAGA,UAAU,eACZ,0BAAMA,UAAU,MAAhB,aADD,IACwCH,GAExC,wBAAIG,UAAU,oBAAd,gBACA,wBAAIA,UAAU,aAAaD,EAAYI,KAAI,SAACC,EAAYC,GAAb,OAC1C,wBAAIC,IAAKD,GAAID,EAAWG,e,GAhBTC,IAAMC,WCuCVC,MApCf,YAA6B,IAAVC,EAAS,EAATA,QAclB,OACC,6BAGEA,EAAQR,KAAI,SAACS,EAAIP,GAChB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLT,MAAOgB,EAAIC,OAAOC,MAClBjB,SAAUe,EAAIC,OAAOhB,SACrBC,IAAKc,EAAIC,OAAOE,MAChBhB,YAAaa,EAAIC,OAAOd,mBChBfiB,MAVf,YAA+C,EAA3BC,YAA4B,IAAfC,EAAc,EAAdA,aAChC,OACC,yBAAKlB,UAAU,OAEd,2BAAOA,UAAU,uCAAuCmB,KAAK,SAASC,YAAY,iCAAiCC,SAAUH,M,MCOjHI,MAZf,SAAgB3B,GAEf,OACC,yBAAK4B,MAAO,CAACC,UAAW,SAAUC,OAAQ,SAAUC,UAAW,SAC7D/B,EAAMgC,WCQKC,MAZf,SAAgBjC,GAEf,OACE,4BAASkC,MAAM,iBACd,yBAAK5B,IAAI,uGAAuGD,UAAU,2BAA2BE,IAAI,gBAC1J,wBAAIF,UAAU,mBAAd,kBCuBI8B,EAAQ,WACRC,EAAS,mCAqDDC,E,YAlDd,aAAc,IAAD,8BACZ,+CAWDC,cAAgB,SAACC,GAEhBC,MAAM,mCAAD,OAAoCD,EAApC,mBAAyDJ,EAAzD,oBAA0EC,IAC9EK,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKC,SAAS,CAACC,UAAWF,EAAKG,OAC/BC,QAAQC,IAAIL,EAAKG,UApBN,EAyBbG,eAAgB,SAACC,GAChBH,QAAQC,IAAIE,EAAMC,OAAOC,OACzB,EAAKf,cAAca,EAAMC,OAAOC,OAChC,EAAKR,SAAS,CAACvB,YAAc6B,EAAMC,OAAOC,SA1B1C,EAAKC,MAAO,CACXR,UAAW,GACXxB,YAAa,IAEd,EAAKgB,cAAc,OANP,E,sEAiCX,OACE,yBAAKjC,UAAU,MAEd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWkB,aAAcxB,KAAKmD,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlC,QAASjB,KAAKuD,MAAMR,kB,GAxCnBjC,IAAMC,WCtBJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.441aed27.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component{\n\n\nrender(){\n\tconst {title, calories, img, ingredients} = this.props;\n\treturn(\n\t\t\n\t\t<div className=\"tc bg-purple mw6 dib br3 pa3 ma3 grow bw2 shadow-5\">\n\t\t\n\t\t\t<h2 className=\"tc f3 yellow\">{title}</h2>\n\t\t\t<img src={img} alt=\"RecipeImage\" className=\"tc ba bw2 b--yellow br3\" />\n\t\t\t<p className=\"tc dark-red\">\n\t\t\t\t<span className=\"f4\">Calories:</span> {calories}\n\t\t\t</p>\n\t\t\t<h3 className=\"tl ma4 f4 yellow\">Ingredients:</h3>\n\t\t\t<ul className=\"tl yellow\">{ingredients.map((ingredient, i) => \n\t\t\t\t<li key={i}>{ingredient.text}</li>)}\n\t\t\t</ul>\n\t\t\t\n\t\t</div>\n\n\n\t\t);\n}\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\n\n// const {robots} =props;\nfunction CardList({recipes}){\n\t/*const cardComponent = robots.map((user,i) => {\n\t\treturn (\n\t\t<Card \n\t\tkey={i} \n\t\tid={user.id} \n\t\tname={user.name} \n\t\temail={user.email}\n\t\t/>\n\t\t);\n\t})\n\n\tand use {cardComponent} inside return <div> below*/\n\n\treturn(\n\t\t<div>\n\t\t\t\n\t\t\t{\n\t\t\t\trecipes.map((rcp,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\ttitle={rcp.recipe.label}\n\t\t\t\t\t\tcalories={rcp.recipe.calories} \n\t\t\t\t\t\timg={rcp.recipe.image}\n\t\t\t\t\t\tingredients={rcp.recipe.ingredients}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t    </div>\n\n\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\n/* pure function */\n\nfunction SearchBox({searchfield, searchChange}){\n\treturn(\n\t\t<div className=\"pa2\">\n\n\t\t\t<input className=\" purple pa3 tc ba br4 w-50 bg-white \" type=\"search\" placeholder=\"Search your favourite recipe..\" onChange={searchChange} />\n\t\t</div>\n\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\n/* we can add styles in jsx using double square brackets */\nfunction Scroll(props){\n\n\treturn(\n\t\t<div style={{overflowY: 'scroll', height: '2000px', marginTop: '20px'}}>\n\t\t\t{props.children}\n\n\t\t</div>\n\n\t\t); \n\n}\n\nexport default Scroll;","import React from 'react';\n\n/* we can add styles in jsx using double square brackets */\nfunction Header(props){\n\n\treturn(\n\t\t\t<header  class=\"tc pt2 pt5-ns\">\n\t\t \t<img src=\"https://icons-for-free.com/iconfiles/png/512/bakery+svglinecolor+recipe+book-1319964872908984700.png\" className=\"br3 ba b--black-10 h3 w3\" alt=\"RecipeImage\" />\n\t\t\t<h1 className=\"f1 mv3 b purple\"> Recipe Book</h1>\n\t\t\t</header>\n\n\t\t); \n\n}\n\nexport default Header;","import React from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport './App.css';\n//import {robots} from '../robots'; //destruct so write in angular brackets\nimport Scroll from '../Components/Scroll';\nimport Header from '../Components/Header';\n\n/* STATE = object that describes our application */\n/* props = properties (never change) */\n\n/*function App(props){\n\treturn (\n\t\t<div className=\"tc\">\n\t\t\t<h1> RoboFriends</h1>\n\n\t\t\t<SearchBox />\n\n\t\t\t<CardList robots={robots}/>\n\t\t</div>\n\n\t\t);\n}*/\n\n/* \nany component that have state uses the class syntax, \nso they can use constructor to create state \nApp component have two states: robots and searchfiled \ncan be passed as props to child\nnot pure function bcoz it contains state\n*/\n\tconst appID = '8844fdb1';\n\tconst appKey = '7e6489f2cc4ed13b7444f5cb7089ca0b';\n\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state ={\n\t\t\tfoodItems: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t\tthis.performSearch(\"ice\");\n\t}\n\n\n\n\n\tperformSearch = (searchItem) =>{\n\n\t\tfetch(`https://api.edamam.com/search?q=${searchItem}&app_id=${appID}&app_key=${appKey}`)\n\t\t.then(response => {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(data =>{\n\t\t\tthis.setState({foodItems: data.hits });\n\t\t\tconsole.log(data.hits);\n\t\t});\n\t\t\n\n\t}\n\tonSearchChange =(event) =>{\n\t\tconsole.log(event.target.value);\n\t\tthis.performSearch(event.target.value);\n\t\tthis.setState({searchfield : event.target.value});\n\t}\n\n\trender(){\n\n\t\t\treturn (\n\t\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t\n\t\t\t\t\t\t<Header/>\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<CardList recipes={this.state.foodItems}/>\n\t\t\t\t\t\t</Scroll>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t\t);\n\t\t}\n\t\t\t\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}